To resolve the issues with cleaning up the string and displaying the messages in a human-readable format, let's update the `cleanString` function and ensure it effectively handles HTML entities and tags. We'll also update the HTML to properly utilize this function.

Hereâ€™s how you can improve the `cleanString` function to properly decode HTML entities and remove unnecessary tags:

### Updated `cleanString` Function

```typescript
cleanString(input: string): string {
  const div = document.createElement('div');
  div.innerHTML = input;
  return div.textContent || div.innerText || '';
}
```

This function creates a temporary `div` element, sets its inner HTML to the input string, and then retrieves the text content, effectively decoding any HTML entities.

### Updated HTML and Component Code

Here's how to integrate this function into your existing component to display the messages:

#### Component TypeScript

```typescript
import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';

export interface SmartAssistantAuditEntity {
  id: number;
  sessionId: number;
  employeeId: number;
  lanId: string;
  messages: Message[];
  creationDateTime: string;
  updationDateTime: string;
  serverIp: number;
  clientIp: number;
}

export interface Message {
  type: 'self-message' | 'bot-message' | 'error-message';
  content: string;
  timestamp: string;
  actions: boolean;
  submitActions: boolean;
  needsConfirmation: boolean;
  enableDownload: boolean;
  createSupportTicket: boolean;
  isTyping: boolean;
  status: string; // 'success' | 'error' | 'warning' | 'default'
  contentType: string;
}

@Component({
  selector: 'app-sa-audit-log',
  templateUrl: './sa-audit-log.component.html',
  styleUrls: ['./sa-audit-log.component.scss'],
})
export class SaAuditLogComponent implements OnInit {
  auditLogUri: string = 'http://localhost:8082/v1/admin/smartassistant/getAuditLogs';
  columnDefs: any[] = [];
  rowData: SmartAssistantAuditEntity[] = [];
  sideBar = { position: 'left' };
  gridApi: any;
  gridColumnApi: any;
  showMessageHistory: boolean = false;
  messageHistory: Message[] = [];

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.processTableData();
  }

  processTableData(): void {
    this.generateColumnDefs();
    this.generateRowData();
  }

  generateColumnDefs(): void {
    this.columnDefs = [
      { headerName: 'Session ID', field: 'sessionId', sortable: true, filter: true },
      { headerName: 'Employee ID', field: 'employeeId', sortable: true, filter: true },
      { headerName: 'LAN ID', field: 'lanId', sortable: true, filter: true },
      { headerName: 'API Name', field: 'apiName', sortable: true, filter: true },
      { headerName: 'Creation Time', field: 'creationDateTime', sortable: true, filter: true },
      { headerName: 'Server IP', field: 'serverIp', sortable: true, filter: true },
      { headerName: 'Client IP', field: 'clientIp', sortable: true, filter: true },
      {
        headerName: 'Messages',
        cellRenderer: (params: any) => {
          return `<a href="javascript:void(0);" (click)="onCellClicked(${params.node.rowIndex})">View</a>`;
        },
      },
    ];
  }

  generateRowData(): void {
    this.http.get<SmartAssistantAuditEntity[]>(this.auditLogUri).subscribe((logs) => {
      this.rowData = logs;
    });
  }

  onCellClicked(rowIndex: number): void {
    const selectedRow = this.rowData[rowIndex];
    this.messageHistory = selectedRow.messages;
    this.showMessageHistory = true;
  }

  cleanString(input: string): string {
    const div = document.createElement('div');
    div.innerHTML = input;
    return div.textContent || div.innerText || '';
  }

  closeMessageHistory(): void {
    this.showMessageHistory = false;
  }
}
```

#### Component HTML

```html
<div class="panel_format table_container">
  <div class="header-container">
    <span class="heading">Audit Logs</span>
    <div class="button-group">
      <button class="icon-button" title="Refresh"><i class="fa fa-refresh"></i></button>
      <button class="icon-button" title="Export API Data in JSON"><i class="fa fa-download"></i></button>
      <input class="search-input" type="search" placeholder="Search..." (input)="onQuickFilterChanged($event)" />
    </div>
  </div>

  <ag-grid-angular
    id="viewSummaryTbl"
    style="width: 100%; height: 500px;"
    class="ag-theme-balham"
    [rowData]="rowData"
    [columnDefs]="columnDefs"
    [defaultColDef]="defaultColDef"
    [sideBar]="sideBar"
    [enableRangeSelection]="true"
    [enableCharts]="true"
    [animateRows]="true"
    [pagination]="true"
    [paginationPageSize]="10"
    (gridReady)="onGridReady($event)"
    [enableCellTextSelection]="true"
  ></ag-grid-angular>
</div>

<div *ngIf="showMessageHistory" class="modal" tabindex="-1" role="dialog" aria-labelledby="messageHistoryLabel">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="messageHistoryLabel">Message History</h5>
        <button type="button" class="close" (click)="closeMessageHistory()" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <div *ngFor="let message of messageHistory">
          <div *ngIf="message.type === 'bot-message'" class="bot-message">
            {{ cleanString(message.content) }}
          </div>
          <div *ngIf="message.type === 'self-message'" class="self-message">
            {{ cleanString(message.content) }}
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" (click)="closeMessageHistory()">Close</button>
      </div>
    </div>
  </div>
</div>
```

#### CSS (Component SCSS)

```scss
.bot-message {
  background-color: #e0f7fa;
  padding: 10px;
  border-radius: 5px;
  margin-bottom: 5px;
}

.self-message {
  background-color: #fff3e0;
  padding: 10px;
  border-radius: 5px;
  margin-bottom: 5px;
}
```

### Explanation:

1. **Clean String Function**: This function now uses a `div` element to decode HTML entities.
2. **Column Definitions**: Updated the cell renderer for the messages column to display a "View" link.
3. **onCellClicked**: This method gets triggered when the "View" link is clicked, setting the `messageHistory` and showing the message history modal.
4. **HTML**: The modal shows the message history, using `cleanString` to display the content, and the messages are styled differently based on their type.

This should now properly format and display your message history in a human-readable format.