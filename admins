import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-admin-management',
  templateUrl: './admin-management.component.html',
  styleUrls: ['./admin-management.component.css']
})
export class AdminManagementComponent implements OnInit {
  configData: any;
  apps: string[] = [];
  services: any = {};
  apis: any = {};

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.loadConfigurations();
  }

  loadConfigurations(): void {
    this.http.get('/api/configurations').subscribe(
      (data: any) => {
        this.configData = data;
        this.apps = Object.keys(data);
        this.setServicesAndApis(data);
      },
      error => {
        console.error('Error loading configurations', error);
      }
    );
  }

  setServicesAndApis(data: any): void {
    this.apps.forEach(app => {
      this.services[app] = data[app].services.map(service => service.name);
      this.apis[app] = {};
      data[app].services.forEach(service => {
        this.apis[app][service.name] = service.apis.map(api => api.name);
      });
    });
  }
}



<form (ngSubmit)="onSubmitService(serviceForm)" #serviceForm="ngForm">
  <div class="form-group">
    <label for="appName">App Name</label>
    <select id="appName" name="appName" class="form-control" [(ngModel)]="selectedAppName" (change)="onAppChange()">
      <option *ngFor="let app of apps" [value]="app">{{ app }}</option>
    </select>
  </div>
  <div class="form-group">
    <label for="serviceName">Service Name</label>
    <select id="serviceName" name="serviceName" class="form-control" [(ngModel)]="selectedServiceName">
      <option *ngFor="let service of services[selectedAppName]" [value]="service">{{ service }}</option>
    </select>
  </div>
  <button type="submit" class="btn btn-primary">Onboard Service</button>
</form>

<form (ngSubmit)="onSubmitApi(apiForm)" #apiForm="ngForm">
  <div class="form-group">
    <label for="appName">App Name</label>
    <select id="appName" name="appName" class="form-control" [(ngModel)]="selectedAppName" (change)="onAppChange()">
      <option *ngFor="let app of apps" [value]="app">{{ app }}</option>
    </select>
  </div>
  <div class="form-group">
    <label for="serviceName">Service Name</label>
    <select id="serviceName" name="serviceName" class="form-control" [(ngModel)]="selectedServiceName" (change)="onServiceChange()">
      <option *ngFor="let service of services[selectedAppName]" [value]="service">{{ service }}</option>
    </select>
  </div>
  <div class="form-group">
    <label for="apiName">API Name</label>
    <input type="text" id="apiName" name="apiName" class="form-control" ngModel>
  </div>
  <!-- Add other fields as necessary -->
  <button type="submit" class="btn btn-primary">Onboard API</button>
</form>

<ag-grid-angular
  style="width: 100%; height: 600px;"
  class="ag-theme-alpine"
  [rowData]="configData"
  [columnDefs]="columnDefs"
  [defaultColDef]="defaultColDef"
  [animateRows]="true">
</ag-grid-angular>



import com.amazonaws.services.s3.AmazonS3;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.Map;

@Service
public class SmartAssistantAdminService {

    @Autowired
    private AmazonS3 s3Client;

    @Autowired
    private ObjectMapper objectMapper;

    private final String bucketName = "your-bucket-name";

    public Map<String, Object> getConfigurations() throws Exception {
        Map<String, Object> configurations = new HashMap<>();

        // Iterate through the apps in the S3 bucket
        for (String appName : getAppNames()) {
            String configKey = "smartassistant/" + appName + "/config.json";
            String configContent = s3Client.getObjectAsString(bucketName, configKey);
            Map<String, Object> appConfig = objectMapper.readValue(configContent, Map.class);
            configurations.put(appName, appConfig);
        }

        return configurations;
    }

    private List<String> getAppNames() {
        // Fetch the list of app names from S3 bucket
        List<String> appNames = new ArrayList<>();
        ObjectListing listing = s3Client.listObjects(bucketName, "smartassistant/");
        for (S3ObjectSummary summary : listing.getObjectSummaries()) {
            String key = summary.getKey();
            if (key.endsWith("/config.json")) {
                appNames.add(key.split("/")[1]);
            }
        }
        return appNames;
    }
}




To create a dynamic admin portal for managing configurations in your Smart Assistant application, you will need to follow these steps:

1. **Load Configurations at Initialization**
2. **Display Configurations in AG Grid**
3. **Handle Form Submissions for Onboarding Services and APIs**
4. **Perform Update and Delete Operations**

Here's how you can achieve this:

### Step 1: Load Configurations at Initialization

In your `admin-management.component.ts`, create a method to fetch the configurations from the backend when the component initializes.

```typescript
import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-admin-management',
  templateUrl: './admin-management.component.html',
  styleUrls: ['./admin-management.component.css']
})
export class AdminManagementComponent implements OnInit {
  configData: any;
  apps: string[] = [];
  services: any = {};
  apis: any = {};

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.loadConfigurations();
  }

  loadConfigurations(): void {
    this.http.get('/api/configurations').subscribe(
      (data: any) => {
        this.configData = data;
        this.apps = Object.keys(data);
        this.services = data.services;
        this.apis = data.apis;
      },
      error => {
        console.error('Error loading configurations', error);
      }
    );
  }
}
```

### Step 2: Display Configurations in AG Grid

Modify your `admin-management.component.html` to display the loaded configurations in an AG Grid.

```html
<ag-grid-angular
  style="width: 100%; height: 600px;"
  class="ag-theme-alpine"
  [rowData]="configData"
  [columnDefs]="columnDefs"
  [defaultColDef]="defaultColDef"
  [animateRows]="true">
</ag-grid-angular>
```

### Step 3: Handle Form Submissions for Onboarding Services and APIs

Add methods to handle form submissions for onboarding services and APIs. Bind these methods to your form in `admin-management.component.html`.

```typescript
onSubmitService(form: any): void {
  const serviceName = form.value.serviceName;
  const appName = form.value.appName;

  this.http.post(`/api/${appName}/onboardService`, { serviceName }).subscribe(
    response => {
      console.log('Service onboarded successfully', response);
      this.loadConfigurations(); // Reload configurations to update the UI
    },
    error => {
      console.error('Error onboarding service', error);
    }
  );
}

onSubmitApi(form: any): void {
  const apiName = form.value.apiName;
  const serviceName = form.value.serviceName;
  const appName = form.value.appName;
  const apiDetails = form.value;

  this.http.post(`/api/${appName}/${serviceName}/onboardApi`, apiDetails).subscribe(
    response => {
      console.log('API onboarded successfully', response);
      this.loadConfigurations(); // Reload configurations to update the UI
    },
    error => {
      console.error('Error onboarding API', error);
    }
  );
}
```

### Step 4: Perform Update and Delete Operations

Add methods to handle update and delete operations for services and APIs.

```typescript
onUpdateApi(form: any): void {
  const apiName = form.value.apiName;
  const serviceName = form.value.serviceName;
  const appName = form.value.appName;
  const apiDetails = form.value;

  this.http.put(`/api/${appName}/${serviceName}/${apiName}`, apiDetails).subscribe(
    response => {
      console.log('API updated successfully', response);
      this.loadConfigurations(); // Reload configurations to update the UI
    },
    error => {
      console.error('Error updating API', error);
    }
  );
}

onDeleteApi(apiName: string, serviceName: string, appName: string): void {
  this.http.delete(`/api/${appName}/${serviceName}/${apiName}`).subscribe(
    response => {
      console.log('API deleted successfully', response);
      this.loadConfigurations(); // Reload configurations to update the UI
    },
    error => {
      console.error('Error deleting API', error);
    }
  );
}
```

### Example Backend API Endpoints

Ensure your backend has the necessary endpoints to handle these requests:

```java
@RestController
@RequestMapping("/api")
public class SmartAssistantAdminController {

    @Autowired
    private SmartAssistantAdminService adminService;

    @PostMapping("/{appName}/onboardService")
    public ResponseEntity<?> onboardService(@PathVariable String appName, @RequestBody ServiceRequest request) {
        adminService.onboardService(appName, request);
        return ResponseEntity.ok("Service onboarded successfully");
    }

    @PostMapping("/{appName}/{serviceName}/onboardApi")
    public ResponseEntity<?> onboardApi(@PathVariable String appName, @PathVariable String serviceName, @RequestBody ApiRequest request) {
        adminService.onboardApi(appName, serviceName, request);
        return ResponseEntity.ok("API onboarded successfully");
    }

    @PutMapping("/{appName}/{serviceName}/{apiName}")
    public ResponseEntity<?> updateApi(@PathVariable String appName, @PathVariable String serviceName, @PathVariable String apiName, @RequestBody ApiRequest request) {
        adminService.updateApi(appName, serviceName, apiName, request);
        return ResponseEntity.ok("API updated successfully");
    }

    @DeleteMapping("/{appName}/{serviceName}/{apiName}")
    public ResponseEntity<?> deleteApi(@PathVariable String appName, @PathVariable String serviceName, @PathVariable String apiName) {
        adminService.deleteApi(appName, serviceName, apiName);
        return ResponseEntity.ok("API deleted successfully");
    }

    @GetMapping("/configurations")
    public ResponseEntity<?> getConfigurations() {
        Map<String, Object> configurations = adminService.getConfigurations();
        return ResponseEntity.ok(configurations);
    }
}
```

This code sets up the frontend and backend to dynamically load configurations, display them in a grid, and handle form submissions for onboarding, updating, and deleting services and APIs.
