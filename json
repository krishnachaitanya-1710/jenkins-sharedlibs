Technical Design Document for EDSO Smart Assistant
Introduction
The EDSO Smart Assistant aims to streamline operations by automating responses to common queries, providing stock answers for unmodeled areas, and delivering data insights. This document outlines the technical design for the initial release of the smart assistant application.

Background
The prototype of the EDSO Smart Assistant has been approved, and a roadmap has been established. This document focuses on supporting the baseline requirements provided by the DSO Customer Care team, aiming to incorporate essential features in the initial release.

Requirements
The primary requirements for the smart assistant are as follows:

Ability to get answers to questions for areas where we have modeled the Q&A: This involves pre-defined questions and answers stored in the system.
Ability to provide stock answers (e.g., "please reach out to customer care") to questions for areas where we have not modeled the Q&A: This ensures that users still receive a response even if specific content is not yet available.
Ability to provide data insights like the number of questions asked, the number of users asking questions, etc.: This involves tracking and reporting key metrics for continuous improvement and analysis.
Goals
The goals of the initial release are:

To create a robust Q&A system that can accurately respond to user queries based on pre-modeled data.
To implement fallback mechanisms that provide stock responses for unmodeled queries.
To develop analytics capabilities that offer insights into user interactions and system performance.
Design
1. Architecture Overview
The system architecture will be a multi-tier design, comprising the following layers:

Presentation Layer: The user interface built using Angular.
Business Logic Layer: The backend services implemented in Spring Boot.
Data Layer: Data storage and retrieval mechanisms, including NoSQL databases and S3 for global variables.
2. Components
User Interface (UI)

Chatbot Interface: An expandable and interactive UI allowing users to interact with the assistant.
Admin Dashboard: For managing Q&A content, viewing analytics, and updating stock answers.
Backend Services

Q&A Service: Handles queries by matching them to the pre-modeled Q&A database.
Fallback Service: Provides stock answers for unmodeled queries.
Analytics Service: Collects and processes data on user interactions, generating insights and reports.
Data Storage

NoSQL Database: For storing Q&A pairs and user interaction data.
S3 Bucket: For storing global variables and other configuration files.
3. Data Flow
User Query: A user inputs a query into the chatbot interface.
Query Processing: The backend services process the query:
If a match is found in the Q&A database, the appropriate answer is returned.
If no match is found, a stock answer is provided by the fallback service.
Analytics Logging: The query and the response are logged for analytics purposes.
Response Delivery: The response is displayed to the user on the chatbot interface.
Analytics Processing: Periodically, the analytics service processes the logs to generate reports on the number of queries, user engagement, and other metrics.
4. Security and Authentication
Service Principals and Managed Identities: For secure access to Azure resources.
OAuth2: For authenticating users and managing sessions.
5. Error Handling
Logging: Comprehensive logging of all interactions and errors.
Monitoring: Real-time monitoring and alerting for service disruptions or errors.
Conclusion
This technical design document provides a detailed plan for implementing the initial release of the EDSO Smart Assistant, focusing on the baseline requirements provided. The proposed architecture and components ensure a scalable, secure, and efficient system that meets the outlined goals.

