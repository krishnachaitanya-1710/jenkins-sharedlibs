To replace your basic HTML table with AG Grid in Angular, follow these steps:

1. **Install AG Grid**:
   ```bash
   npm install --save ag-grid-community ag-grid-angular
   ```

2. **Import AG Grid Module**:
   Add `AgGridModule` to your `AppModule` (or relevant module).
   ```typescript
   import { AgGridModule } from 'ag-grid-angular';

   @NgModule({
     declarations: [AppComponent],
     imports: [
       BrowserModule,
       AgGridModule.withComponents([]),
     ],
     providers: [],
     bootstrap: [AppComponent]
   })
   export class AppModule { }
   ```

3. **Update Your Component**:
   Replace your HTML table with AG Grid in `admin-management.component.html`.
   ```html
   <ag-grid-angular
     style="width: 100%; height: 500px;"
     class="ag-theme-alpine"
     [rowData]="rowData"
     [columnDefs]="columnDefs"
     [defaultColDef]="defaultColDef"
     [domLayout]="'autoHeight'">
   </ag-grid-angular>
   ```

4. **Define Column and Row Data in Component**:
   Update `admin-management.component.ts` with your data and grid options.
   ```typescript
   import { Component } from '@angular/core';

   @Component({
     selector: 'app-admin-management',
     templateUrl: './admin-management.component.html',
     styleUrls: ['./admin-management.component.scss']
   })
   export class AdminManagementComponent {
     columnDefs = [
       { headerName: 'API Name', field: 'api.name', sortable: true, filter: true },
       { headerName: 'Service Name', field: 'service.name', sortable: true, filter: true },
       { headerName: 'Description', field: 'api.label', sortable: true, filter: true },
       { headerName: 'Keywords', field: 'api.keywords', sortable: true, filter: true },
       { headerName: 'Action', field: 'action', cellRenderer: this.actionCellRenderer }
     ];

     rowData = [
       {
         api: { name: 'getGlobalVariable', label: 'Get information about existing global variables', keywords: 'getGlobalVariable, info' },
         service: { name: 'DdpAppService' },
         action: ''
       },
       // Add more rows as needed
     ];

     defaultColDef = {
       flex: 1,
       minWidth: 100,
       filter: true,
       sortable: true,
       resizable: true,
     };

     actionCellRenderer(params: any) {
       return `
         <button class="btn btn-secondary dropdown-toggle" type="button" id="actionMenuButton${params.node.rowIndex}" data-bs-toggle="dropdown" aria-expanded="false">
           Actions
         </button>
         <ul class="dropdown-menu" aria-labelledby="actionMenuButton${params.node.rowIndex}">
           <li><a class="dropdown-item" (click)="viewApi(params.data.api)">View</a></li>
           <li><a class="dropdown-item" (click)="editApi(params.data.service, params.data.api)">Edit</a></li>
           <li><a class="dropdown-item" (click)="deleteApi(params.data.service, params.data.api)">Delete</a></li>
         </ul>
       `;
     }

     viewApi(api: any) {
       console.log('View API:', api);
     }

     editApi(service: any, api: any) {
       console.log('Edit API:', service, api);
     }

     deleteApi(service: any, api: any) {
       console.log('Delete API:', service, api);
     }
   }
   ```

5. **Add AG Grid Styles**:
   Include AG Grid styles in `styles.scss`.
   ```scss
   @import "~ag-grid-community/styles/ag-grid.css";
   @import "~ag-grid-community/styles/ag-theme-alpine.css";
   ```

This setup will give you a functional AG Grid with filtering, sorting, and column resizing capabilities. Customize the `rowData` and `columnDefs` as per your specific requirements.